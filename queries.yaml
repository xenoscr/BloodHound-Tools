---
front:
    node_statistics:
        1:
            name: Users
            type: int
            query: |
                MATCH (n:User {domain:{domain}}) RETURN count(n)
        2:
            name: Groups
            type: int
            query: |
                MATCH (n:Group {domain:{domain}}) RETURN count(n)
        3:
            name: Computers
            type: int
            query: |
                MATCH (n:Computer {domain:{domain}}) RETURN count(n)
        4:
            name: Domains
            type: int   
            query: |
                MATCH (n:Domain {domain:{domain}}) RETURN count(n)
        5:
            name: GPOs
            type: int
            query: |
                MATCH (n:GPO {domain:{domain}}) RETURN count(n)
        6:
            name: OUs
            type: int
            query: |
                MATCH (n:OU {domain:{domain}}) RETURN count(n)
    edge_statistics:
        1:
            name: MemberOf
            type: int
            query: |
               MATCH ()-[r:MemberOf]->({domain:{domain}}) RETURN count(r) 
        2:
            name: AdminTo
            type: int
            query: |
                MATCH ()-[r:AdminTo]->({domain:{domain}}) RETURN count(r)
        3:
            name: HasSession
            type: int
            query: |
                MATCH ()-[r:HasSession]->({domain:{domain}}) RETURN count(r)
        4:
            name: GpLinks
            type: int
            query: |
                MATCH ()-[r:GpLink]->({domain:{domain}}) RETURN count(r)
        5:
            name: ACLs
            type: int
            query: |
                MATCH ()-[r {isacl:true}]->({domain:{domain}}) RETURN count(r)
    qa_statistics:
        1:
            name: Computers With Local Admin Data
            type: int
            query: |
                MATCH (n)-[:AdminTo]->(c:Computer {domain:{domain}})
                WITH COUNT(DISTINCT(c)) as computersWithAdminsCount
                MATCH (c2:Computer {domain:{domain}})
                RETURN toInt(100 * (toFloat(computersWithAdminsCount) / COUNT(c2)))
        2:
            name: Computers With Session Data
            type: int
            query: |
                MATCH (c:Computer {domain:{domain}})-[:HasSession]->()
                WITH COUNT(DISTINCT(c)) as computersWithSessions
                MATCH (c2:Computer {domain:{domain}})
                RETURN toInt(100 * (toFloat(computersWithSessions) / COUNT(c2)))
        3:
            name: Users With Session Data
            type: int
            query: |
                MATCH ()-[:HasSession]->(u:User {domain:{domain}})
                WITH COUNT(DISTINCT(u)) as usersWithSessions
                MATCH (u2:User {domain:{domain},enabled:true})
                RETURN toInt(100 * (toFloat(usersWithSessions) / COUNT(u2)))
critical_asset_analysis:
    1:
        name: Admins on Domain Controllers
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid ENDS WITH "-516"
            MATCH (c:Computer)-[:MemberOf*1..]->(g)
            OPTIONAL MATCH (n)-[:AdminTo]->(c)
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[:AdminTo]->(c)
            WHERE (n:User OR n:Computer) AND (m:User OR m:Computer)
            WITH COLLECT(n) + COLLECT(m) as tempVar1
            UNWIND tempVar1 as tempVar2
            WITH DISTINCT(tempVar2) as tempVar3
            RETURN tempVar3.name
            ORDER BY tempVar3.name ASC
    2:
        name: RDPers on Domain Controllers
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid ENDS WITH "-516"
            MATCH (c:Computer)-[:MemberOf*1..]->(g)
            OPTIONAL MATCH (n)-[:CanRDP]->(c)
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[:CanRDP]->(c)
            WHERE (n:User OR n:Computer) AND (m:User OR m:Computer)
            WITH COLLECT(n) + COLLECT(m) as tempVar1
            UNWIND tempVar1 as tempVar2
            WITH DISTINCT(tempVar2) as tempVar3
            RETURN tempVar3.name
            ORDER BY tempVar3.name ASC
    3:
        name: Domain Controller GPO Controllers
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid ENDS WITH "-516"
            MATCH (c:Computer)-[:MemberOf*1..]->(g)
            OPTIONAL MATCH p1 = (g1:GPO)-[r1:GpLink {enforced:true}]->(container1)-[r2:Contains*1..]->(c)
            OPTIONAL MATCH p2 = (g2:GPO)-[r3:GpLink {enforced:false}]->(container2)-[r4:Contains*1..]->(c)
            WHERE NONE (x in NODES(p2) WHERE x.blocksinheritance = true AND x:OU AND NOT (g2)-->(x))
            WITH COLLECT(g1) + COLLECT(g2) AS tempVar1
            UNWIND tempVar1 as tempVar2
            WITH DISTINCT(tempVar2) as GPOs
            OPTIONAL MATCH (n)-[{isacl:true}]->(GPOs)
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[{isacl:true}]->(GPOs)
            WITH COLLECT(n) + COLLECT(m) as tempVar1
            UNWIND tempVar1 as tempVar2
            RETURN DISTINCT(tempVar2.name)
            ORDER BY tempVar2.name ASC
    4:
        name: Admins on Exchange Servers
        type: list
        query: |
            MATCH (n:Computer)
            UNWIND n.serviceprincipalnames AS spn 
            MATCH (n) WHERE TOUPPER(spn) CONTAINS "EXCHANGEMDB"
            WITH n as c
            MATCH (c)-[:MemberOf*1..]->(g:Group {domain:{domain}})
            WHERE g.name CONTAINS "EXCHANGE"
            OPTIONAL MATCH (n)-[:AdminTo]->(c)
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[:AdminTo]->(c)
            WITH COLLECT(n) + COLLECT(m) as tempVar1
            UNWIND tempVar1 AS exchangeAdmins
            RETURN DISTINCT(exchangeAdmins.name)
    5:
        name: RDPers on Exchange Servers
        type: list
        query: |
            MATCH (n:Computer)
            UNWIND n.serviceprincipalnames AS spn 
            MATCH (n) WHERE TOUPPER(spn) CONTAINS "EXCHANGEMDB"
            WITH n as c
            MATCH (c)-[:MemberOf*1..]->(g:Group {domain:{domain}})
            WHERE g.name CONTAINS "EXCHANGE"
            OPTIONAL MATCH (n)-[:CanRDP]->(c)
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[:CanRDP]->(c)
            WITH COLLECT(n) + COLLECT(m) as tempVar1
            UNWIND tempVar1 AS exchangeAdmins
            RETURN DISTINCT(exchangeAdmins.name)
    6:
        name: Exchange Server GPO Controllers
        type: list
        query: |
            MATCH (n:Computer)
            UNWIND n.serviceprincipalnames AS spn 
            MATCH (n) WHERE TOUPPER(spn) CONTAINS "EXCHANGEMDB"
            WITH n as c
            MATCH (c)-[:MemberOf*1..]->(g:Group {domain:{domain}})
            WHERE g.name CONTAINS "EXCHANGE"
            OPTIONAL MATCH p1 = (g1:GPO)-[r1:GpLink {enforced:true}]->(container1)-[r2:Contains*1..]->(c)
            OPTIONAL MATCH p2 = (g2:GPO)-[r3:GpLink {enforced:false}]->(container2)-[r4:Contains*1..]->(c)
            WHERE NONE (x in NODES(p2) WHERE x.blocksinheritance = true AND x:OU AND NOT (g2)-->(x))
            WITH COLLECT(g1) + COLLECT(g2) AS tempVar1
            UNWIND tempVar1 as tempVar2
            WITH DISTINCT(tempVar2) as GPOs
            OPTIONAL MATCH (n)-[{isacl:true}]->(GPOs)
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[{isacl:true}]->(GPOs)
            WITH COLLECT(n) + COLLECT(m) as tempVar1
            UNWIND tempVar1 as tempVar2
            RETURN DISTINCT(tempVar2.name)
            ORDER BY tempVar2.name ASC
    7:
        name: Domain Admin Controllers
        type: list
        query: |
            MATCH (DAUser)-[:MemberOf*1..]->(g:Group {domain:{domain}})
            WHERE g.objectsid ENDS WITH "-512"
            OPTIONAL MATCH (n)-[{isacl:true}]->(DAUser)
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[{isacl:true}]->(DAUser)
            WITH COLLECT(n) + COLLECT(m) as tempVar1
            UNWIND tempVar1 AS DAControllers
            RETURN DISTINCT(DAControllers.name)
            ORDER BY DAControllers.name ASC
    8:
        name: Computers With DA Sessions
        type: list
        query: |
            MATCH (c:Computer)-[:HasSession]->()-[:MemberOf*1..]->(g:Group {domain:{domain}})
            WHERE g.objectsid ENDS WITH "-512"
            RETURN DISTINCT(c.name)
            ORDER BY c.name ASC
    9:
        name: Domain Admin GPO Controllers
        type: list
        query: |
            MATCH (DAUser)-[:MemberOf*1..]->(g:Group {domain:{domain}})
            WHERE g.objectsid ENDS WITH "-512"
            OPTIONAL MATCH p1 = (g1:GPO)-[r1:GpLink {enforced:true}]->(container1)-[r2:Contains*1..]->(DAUser)
            OPTIONAL MATCH p2 = (g2:GPO)-[r3:GpLink {enforced:false}]->(container2)-[r4:Contains*1..]->(DAUser)
            WHERE NONE (x in NODES(p2) WHERE x.blocksinheritance = true AND x:OU AND NOT (g2)-->(x))
            WITH COLLECT(g1) + COLLECT(g2) AS tempVar1
            UNWIND tempVar1 as tempVar2
            WITH DISTINCT(tempVar2) as GPOs
            OPTIONAL MATCH (n)-[{isacl:true}]->(GPOs)
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[{isacl:true}]->(GPOs)
            WITH COLLECT(n) + COLLECT(m) as tempVar1
            UNWIND tempVar1 as tempVar2
            RETURN DISTINCT(tempVar2.name)
    10:
        name: High Value Object Controllers
        type: list
        query: |
            MATCH (u:User)-[:MemberOf*1..]->(g:Group {domain:{domain},highvalue:true})
            OPTIONAL MATCH (n)-[{isacl:true}]->(u)
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[{isacl:true}]->(u)
            WITH COLLECT(n) + COLLECT(m) as tempVar
            UNWIND tempVar as highValueControllers
            RETURN DISTINCT(highValueControllers.name)
            ORDER BY highValueControllers.name ASC
    11:
        name: High Value User Sessions
        type: list
        query: |
            MATCH (c:Computer)-[:HasSession]->(u:User)-[:MemberOf*1..]->(g:Group {domain:{domain},highvalue:true})
            RETURN DISTINCT(c.name)
            ORDER BY c.name ASC
    12:
        name: High Value User GPO Controllers
        type: list
        query: |
            MATCH (u:User)-[:MemberOf*1..]->(g:Group {domain:{domain},highvalue:true})
            OPTIONAL MATCH p1 = (g1:GPO)-[r1:GpLink {enforced:true}]->(container1)-[r2:Contains*1..]->(u)
            OPTIONAL MATCH p2 = (g2:GPO)-[r3:GpLink {enforced:false}]->(container2)-[r4:Contains*1..]->(u)
            WHERE NONE (x in NODES(p2) WHERE x.blocksinheritance = true AND x:OU AND NOT (g2)-->(x))
            WITH COLLECT(g1) + COLLECT(g2) AS tempVar1
            UNWIND tempVar1 as tempVar2
            WITH DISTINCT(tempVar2) as GPOs
            OPTIONAL MATCH (n)-[{isacl:true}]->(GPOs)
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[{isacl:true}]->(GPOs)
            WITH COLLECT(n) + COLLECT(m) as tempVar1
            UNWIND tempVar1 as tempVar2
            RETURN DISTINCT(tempVar2.name)
            ORDER BY tempVar2.name ASC
low_hanging_fruit:
    1:
        name: Domain Users With Local Admin
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid ENDS WITH "-513"
            OPTIONAL MATCH (g)-[:AdminTo]->(c1)
            OPTIONAL MATCH (g)-[:MemberOf*1..]->(:Group)-[:AdminTo]->(c2)
            WITH COLLECT(c1) + COLLECT(c2) as tempVar
            UNWIND tempVar AS computers
            RETURN DISTINCT(computers.name)
    2:
        name: Everyone With Local Admin
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid = "S-1-1-0"
            OPTIONAL MATCH (g)-[:AdminTo]->(c1)
            OPTIONAL MATCH (g)-[:MemberOf*1..]->(:Group)-[:AdminTo]->(c2)
            WITH COLLECT(c1) + COLLECT(c2) as tempVar
            UNWIND tempVar AS computers
            RETURN DISTINCT(computers.name)
    3:
        name: Authenticated Users With Local Admin
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid = "S-1-5-11"
            OPTIONAL MATCH (g)-[:AdminTo]->(c1)
            OPTIONAL MATCH (g)-[:MemberOf*1..]->(:Group)-[:AdminTo]->(c2)
            WITH COLLECT(c1) + COLLECT(c2) as tempVar
            UNWIND tempVar AS computers
            RETURN DISTINCT(computers.name)
    4:
        name: Objects Controlled by Domain Users
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid ENDS WITH "-513"
            OPTIONAL MATCH (g)-[{isacl:true}]->(n)
            OPTIONAL MATCH (g)-[:MemberOf*1..]->(:Group)-[{isacl:true}]->(m)
            WITH COLLECT(n) + COLLECT(m) as tempVar
            UNWIND tempVar AS objects
            RETURN DISTINCT(objects)
            ORDER BY objects.name ASC
    5:
        name: Objects Controlled by Everyone
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid = 'S-1-1-0'
            OPTIONAL MATCH (g)-[{isacl:true}]->(n)
            OPTIONAL MATCH (g)-[:MemberOf*1..]->(:Group)-[{isacl:true}]->(m)
            WITH COLLECT(n) + COLLECT(m) as tempVar
            UNWIND tempVar AS objects
            RETURN DISTINCT(objects)
            ORDER BY objects.name ASC
    6:
        name: Objects Controlled by Authenticated Users
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid = 'S-1-5-11'
            OPTIONAL MATCH (g)-[{isacl:true}]->(n)
            OPTIONAL MATCH (g)-[:MemberOf*1..]->(:Group)-[{isacl:true}]->(m)
            WITH COLLECT(n) + COLLECT(m) as tempVar
            UNWIND tempVar AS objects
            RETURN DISTINCT(objects)
            ORDER BY objects.name ASC
    7:
        name: Domain Users With RDP Rights
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid ENDS WITH "-513"
            OPTIONAL MATCH (g)-[:CanRDP]->(c1)
            OPTIONAL MATCH (g)-[:MemberOf*1..]->(:Group)-[:CanRDP]->(c2)
            WITH COLLECT(c1) + COLLECT(c2) as tempVar
            UNWIND tempVar AS computers
            RETURN DISTINCT(computers.name)
    8:
        name: Everyone With RDP Rights
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid = "S-1-1-0"
            OPTIONAL MATCH (g)-[:CanRDP]->(c1)
            OPTIONAL MATCH (g)-[:MemberOf*1..]->(:Group)-[:CanRDP]->(c2)
            WITH COLLECT(c1) + COLLECT(c2) as tempVar
            UNWIND tempVar AS computers
            RETURN DISTINCT(computers.name)
    9:
        name: Authenticated Users With RDP Rights
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid = "S-1-5-11"
            OPTIONAL MATCH (g)-[:CanRDP]->(c1)
            OPTIONAL MATCH (g)-[:MemberOf*1..]->(:Group)-[:CanRDP]->(c2)
            WITH COLLECT(c1) + COLLECT(c2) as tempVar
            UNWIND tempVar AS computers
            RETURN DISTINCT(computers.name)
    10:
        name: Domain Users With DCOM Rights
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid ENDS WITH "-513"
            OPTIONAL MATCH (g)-[:ExecuteDCOM]->(c1)
            OPTIONAL MATCH (g)-[:MemberOf*1..]->(:Group)-[:ExecuteDCOM]->(c2)
            WITH COLLECT(c1) + COLLECT(c2) as tempVar
            UNWIND tempVar AS computers
            RETURN DISTINCT(computers.name)
    11:
        name: Everyone With DCOM Rights
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid = "S-1-1-0"
            OPTIONAL MATCH (g)-[:ExecuteDCOM]->(c1)
            OPTIONAL MATCH (g)-[:MemberOf*1..]->(:Group)-[:ExecuteDCOM]->(c2)
            WITH COLLECT(c1) + COLLECT(c2) as tempVar
            UNWIND tempVar AS computers
            RETURN DISTINCT(computers.name)
    12:
        name: Authenticated Users With RDP Rights
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid = "S-1-5-11"
            OPTIONAL MATCH (g)-[:ExecuteDCOM]->(c1)
            OPTIONAL MATCH (g)-[:MemberOf*1..]->(:Group)-[:ExecuteDCOM]->(c2)
            WITH COLLECT(c1) + COLLECT(c2) as tempVar
            UNWIND tempVar AS computers
            RETURN DISTINCT(computers.name)
    13:
        name: Shortest ACL Path Length (Domain Users)
        type: int
        query: |
            MATCH (g1:Group {domain:{domain}})
            WHERE g1.objectsid ENDS WITH "-513"
            MATCH (g2:Group {domain:{domain}})
            WHERE g2.objectsid ENDS WITH "-512"
            MATCH p = shortestPath((g1)-[:Owns|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner*1..]->(g2))
            RETURN LENGTH(p)
    14:
        name: Shortest Derivative Path Length (Domain Users)
        type: int
        query: |
            MATCH (g1:Group {domain:{domain}})
            WHERE g1.objectsid ENDS WITH "-513"
            MATCH (g2:Group {domain:{domain}})
            WHERE g2.objectsid ENDS WITH "-512"
            MATCH p = shortestPath((g1)-[:AdminTo|HasSession|MemberOf*1..]->(g2))
            RETURN LENGTH(p)
    15:
        name: Shortest Hybrid Path Length (Domain Users)
        type: int
        query: |
            MATCH (g1:Group {domain:{domain}})
            WHERE g1.objectsid ENDS WITH "-513"
            MATCH (g2:Group {domain:{domain}})
            WHERE g2.objectsid ENDS WITH "-512"
            MATCH p = shortestPath((g1)-[r*1..]->(g2))
            WHERE NONE(rel in r WHERE type(rel)="GetChanges")
            WITH *
            WHERE NONE(rel in r WHERE type(rel)="GetChangesAll")
            RETURN LENGTH(p)
    16:
        name: Shortest ACL Path Length (Everyone)
        type: int
        query: |
            MATCH (g1:Group {domain:{domain}})
            WHERE g1.objectsid = 'S-1-1-0'
            MATCH (g2:Group {domain:{domain}})
            WHERE g2.objectsid ENDS WITH "-512"
            MATCH p = shortestPath((g1)-[:Owns|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner*1..]->(g2))
            RETURN LENGTH(p)
    17:
        name: Shortest Derivative Path Length (Everyone)
        type: int
        query: |
            MATCH (g1:Group {domain:{domain}})
            WHERE g1.objectsid = 'S-1-1-0'
            MATCH (g2:Group {domain:{domain}})
            WHERE g2.objectsid ENDS WITH "-512"
            MATCH p = shortestPath((g1)-[r*1..]->(g2))
            WHERE NONE(rel in r WHERE type(rel)="GetChanges")
            WITH *
            WHERE NONE(rel in r WHERE type(rel)="GetChangesAll")
            RETURN LENGTH(p)
    18:
        name: Shortest ACL Path Length (Authenticated Users)
        type: int
        query: |
            MATCH (g1:Group {domain:{domain}})
            WHERE g1.objectsid = 'S-1-5-11'
            MATCH (g2:Group {domain:{domain}})
            WHERE g2.objectsid ENDS WITH "-512"
            MATCH p = shortestPath((g1)-[:Owns|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner*1..]->(g2))
            RETURN LENGTH(p)
    19:
        name: Shortest Derivative Path Length (Authenticated Users)
        type: int
        query: |
            MATCH (g1:Group {domain:{domain}})
            WHERE g1.objectsid = 'S-1-5-11'
            MATCH (g2:Group {domain:{domain}})
            WHERE g2.objectsid ENDS WITH "-512"
            MATCH p = shortestPath((g1)-[:AdminTo|HasSession|MemberOf*1..]->(g2))
            RETURN LENGTH(p)
    20:
        name: Shortest Hybrid Path Length (Authenticated Users)
        type: int
        query: |
            MATCH (g1:Group {domain:{domain}})
            WHERE g1.objectsid = 'S-1-5-11'
            MATCH (g2:Group {domain:{domain}})
            WHERE g2.objectsid ENDS WITH "-512"
            MATCH p = shortestPath((g1)-[r*1..]->(g2))
            WHERE NONE(rel in r WHERE type(rel)="GetChanges")
            WITH *
            WHERE NONE(rel in r WHERE type(rel)="GetChangesAll")
            RETURN LENGTH(p)
    21:
        name: Kerberostable User to DA Path Legth
        type: int
        query: |
            MATCH (u:User {domain:{domain},hasspn:true})
            MATCH (g:Group {domain:{domain}})
            WHERE g.objectsid ENDS WITH "-512" AND NOT u.name STARTS WITH "KRBTGT@"
            MATCH p = shortestPath((u)-[*1..]->(g))
            RETURN u.name,LENGTH(p)
            ORDER BY LENGTH(p) ASC
    22:
        name: Computers with > 1000 Admins
        type: list
        query: |
            MATCH (c:Computer {domain:{domain}})
            OPTIONAL MATCH (n)-[:AdminTo]->(c)
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[:AdminTo]->(c)
            WITH COLLECT(n) + COLLECT(m) as tempVar,c
            UNWIND tempVar as admins
            RETURN c.name,COUNT(DISTINCT(admins))
            ORDER BY COUNT(DISTINCT(admins)) DESC
cross_domain_analysis:
    1:
        name: Computers with Foreign Admins
        type: list
        query: |
            MATCH (c:Computer {domain:{domain}})
            OPTIONAL MATCH (n)-[:AdminTo]->(c)
            WHERE (n:User OR n:Computer) AND NOT n.domain = c.domain
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[:AdminTo]->(c)
            WHERE (m:User OR m:Computer) AND NOT m.domain = c.domain
            WITH COLLECT(n) + COLLECT(m) AS tempVar,c
            UNWIND tempVar AS foreignAdmins
            RETURN c.name,COUNT(DISTINCT(foreignAdmins))
            ORDER BY COUNT(DISTINCT(foreignAdmins)) DESC
    2:
        name: GPOs with Foreign Controllers
        type: list
        query: |
            MATCH (g:GPO)
            WHERE SPLIT(g.name,'@')[1] = {domain}
            OPTIONAL MATCH (n)-[{isacl:true}]->(g)
            WHERE (n:User OR n:Computer) AND NOT n.domain = {domain}
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[{isacl:true}]->(g)
            WHERE (m:User OR m:Computer) AND NOT m.domain = {domain}
            WITH COLLECT(n) + COLLECT(m) AS tempVar,g
            UNWIND tempVar AS foreignGPOControllers
            RETURN g.name,COUNT(DISTINCT(foreignGPOControllers))
            ORDER BY COUNT(DISTINCT(foreignGPOControllers)) DESC
    3:
        name: GPOs with Foreign Controllers
        type: list
        query: |
            MATCH (g:Group {domain:{domain}})
            OPTIONAL MATCH (n)-[{isacl:true}]->(g)
            WHERE (n:User OR n:Computer) AND NOT n.domain = g.domain
            OPTIONAL MATCH (m)-[:MemberOf*1..]->(:Group)-[{isacl:true}]->(g)
            WHERE (m:User OR m:Computer) AND NOT m.domain = g.domain
            WITH COLLECT(n) + COLLECT(m) AS tempVar,g
            UNWIND tempVar AS foreignGroupControllers
            RETURN g.name,COUNT(DISTINCT(foreignGroupControllers))
            ORDER BY COUNT(DISTINCT(foreignGroupControllers)) DESC
